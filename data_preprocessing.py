# -*- coding: utf-8 -*-
"""Data_Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Imeneallouche/Data-Preprocessing-workshop-preparation-AI-Horizens-event/blob/main/Data_Preprocessing.ipynb
"""

import pandas as pd
import numpy as np

from google.colab import files
uploaded = files.upload()

Df = pd.read_excel("Book1 (1).xlsx")
Df.head()

Df

"""# **Deduplication**"""

Df.duplicated(subset="Name")

Df_deduplicated = Df.drop_duplicates(subset=["Name"], inplace=False)
Df_deduplicated

"""# **Inconsistant Data Entry**"""

#loop through each column to see the unique values it got
for column in Df.columns.values:
  print(column,":",Df_deduplicated[column].unique(),"\n")

Df_deduplicated["Ethnicity"] = Df_deduplicated["Ethnicity"].str.lower()
Df_deduplicated["Type of Blood Cancer"] = Df_deduplicated["Type of Blood Cancer"].str.lower()
Df_deduplicated["Occupation"] = Df_deduplicated["Occupation"].str.lower()
Df_deduplicated["Treatment"] = Df_deduplicated["Treatment"].str.lower()
# dernahoum kamel minuscule 

#loop through each column to see the unique values it got
for column in Df_deduplicated.columns.values:
  print(column,":",Df_deduplicated[column].unique(),"\n")

!pip install fuzzywuzzy

import fuzzywuzzy
#a good librery
from fuzzywuzzy import process

for value in Df_deduplicated["Ethnicity"].unique():
  matches = fuzzywuzzy.process.extract(value, Df_deduplicated["Ethnicity"].unique(), limit=3, scorer=fuzzywuzzy.fuzz.token_sort_ratio)
  print("these are the matches of",value,":",matches)

def replace_matches_in_column(df, column, string_to_match, min_ratio = 80):
    # get a list of unique strings
    strings = df[column].unique()
    
    # get the top closest matches to our input string
    matches = fuzzywuzzy.process.extract(string_to_match, strings, 
                                         limit=3, scorer=fuzzywuzzy.fuzz.token_sort_ratio)

    # only get matches with a ratio > 90
    close_matches = [matches[0] for matches in matches if matches[1] >= min_ratio]

    # get the rows of all the close matches in our dataframe
    rows_with_matches = df[column].isin(close_matches)

    # replace all rows with close matches with the input matches 
    df.loc[rows_with_matches, column] = string_to_match
    
    # let us know the function's done
    print("All done!")

replace_matches_in_column(Df_deduplicated, "Ethnicity" , "african")
replace_matches_in_column(Df_deduplicated, "Occupation" , "engineer")

Df_deduplicated

"""# **How many missing data points do we have?**"""

#it calculates the missing values count in each column: returns an array of all the columns and the number of missing values
missing_values_count = Df.isnull().sum()

#print missing values count in all columns
missing_values_count[0:]

# how many total missing values do we have?
total_cells = np.product(Df.shape)
total_missing = missing_values_count.sum()

# percent of data that is missing
percent_missing = (total_missing/total_cells) * 100
print(percent_missing)

#columns of records that haven't been recorded
#### hadi n7alouha b data trensformation 
Columns=["Blood Pressure highest", "Blood Pressure lowest","Survival Rate", "Height", "Weight"]

for column in Columns:
  Df_deduplicated[column].fillna(Df_deduplicated[column].mean())

Columns=["Blood Pressure highest", "Blood Pressure lowest","Stage", "Survival Rate"]

for column in Columns:
  mean = Df_deduplicated[column].mean()
  Df_deduplicated[column].fillna(value=mean, inplace=True)

Df_deduplicated

"""# **Data Transformation**"""

Gender = {'Male':0, 'Female' :1}
Ethnicity = {'african':0 , 'asian':1 , 'caucasian':2, 'hispanic':3 }
Type_Blood_Cancer={'leukemia':0 ,'lymphoma':1 , 'multiple myeloma':2, 'myelodysplastic syndrome':3 }
treatment = {'chemotherapy':0 ,'lymphoma':1 , 'radiation therapy':2, 'bone marrow transplant':3 }
Occupation = {'teacher':0, 'nurse':1, 'engineer':2 , 'student':3 , 'retire':4, 'lawyer':5 ,'manager':6, 'business owner':7}
Family_History = {'No':0, 'Yes':1}
Df_deduplicated = Df_deduplicated.replace( 
    { "Gender" : Gender ,
     "Ethnicity" : Ethnicity ,
     "Type of Blood Cancer" : Type_Blood_Cancer,
     "Treatment":treatment ,
     'Occupation' : Occupation,
     'Family History': Family_History
     } )

Df_deduplicated

for i in Df_deduplicated.index.values:
  value= Df_deduplicated.at[i,"Height"]
  if(not value:)
    Df_deduplicated.at[i,"Height"] = int(value.replace('cm','').strip())

for i in Df_deduplicated.index.values:
  value= Df_deduplicated.at[i,"Weight"]
  if(not value):
    Df_deduplicated.at[i,"Weight"] = int(value.replace('kg','').strip())

for i in Df_deduplicated['Height'].values:
  print(type(i))

Df_deduplicated

"""# **Data Standardization**"""

for i in Df_deduplicated.index.values:

  value= Df_deduplicated.at[i,"Height"]
  min = Df_deduplicated["Height"].min
  max = Df_deduplicated["Height"].max

  Df_deduplicated.at[i,"Height"] = 0 + (value-min)*(2-0)/(max-min)

Df_deduplicated